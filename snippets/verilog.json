{
	// Place your snippets for verilog here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }
    "input array": {
        "prefix": "input array",
        "body": [
            "input\t\t[$1:0]\t$2\t,"
        ],
        "description": ""
    },
    "input": {
        "prefix": "input",
        "body": [
            "input\t\t\t\t$1\t,"
        ],
        "description": ""
    },
    "output array": {
        "prefix": "output array",
        "body": [
            "output\t\t[$1:0]\t$2\t,"
        ],
        "description": ""
    },
    "output": {
        "prefix": "output",
        "body": [
            "output\t\t\t\t$1\t,"
        ],
        "description": ""
    }, 
    "module with parameters": {
        "prefix": "module parameters",
        "body": [
            "module ${1:moduleName} #(",
            "\t${2:parameters}",
            ") (",
            "\t${3:ports}",
            ");",
            "\t$0",
            "endmodule"
        ],
        "description": "Insert a module with parameter"
    },
    "module without parameters": {
        "prefix": "module",
        "body": [
            "module ${1:moduleName} (",
            "\t${2:ports}",
            ");",
            "\t$0",
            "endmodule"
        ],
        "description": "Insert a module without parameter"
    },
    "always no rst": {
        "prefix": "always norst",
        "body": [
            "always @(posedge clk) begin",
            "\t$1",
            "end"
        ],
        "description": "always @(posdege clk)"
    },
    "always posedge rst": {
        "prefix": "always posedge",
        "body": [
            "always @(posedge clk or posedge rst) begin",
            "\tif(rst==1'b1)begin",
            "\t\t$1\t<='d0;",
            "\tend",
            "\telse begin",
            "\t\t$1\t<=$2;",
            "\tend",
            "end",
        ],
        "description": "always @(posedge clk or posedge rst)"
    },
    "always negedge rst": {
        "prefix": "always negedge",
        "body": [
            "always @(posedge clk or negedge rst_n) begin",
            "\tif(rst_n==1'b0)begin",
            "\t\t$1\t<='d0;",
            "\tend",
            "\telse begin",
            "\t\t$1\t<=$2;",
            "\tend",
            "end",
        ],
        "description": "always @(posedge clk or negedge rst_n)"
    },
    "beginend": {
        "prefix": "begin",
        "body": [
            "begin",
            "\t$1",
            "end"
        ],
        "description": "begin ... end"
    },
    "case": {
        "prefix": "case",
        "body": [
            "case (${1:param})",
            "\t$2: $3",
            "\tdefault: $4",
            "endcase"
        ],
        "description": "case () ... endcase"
    },
    "reg": {
        "prefix": "reg",
        "body": [
            "reg\t$1;"
        ],
        "description": "reg reg_name;"
    },
    "regarray": {
        "prefix": "rega",
        "body": [
            "reg\t[$1:0]\t$2;"
        ],
        "description": "reg [N:0] reg_name;"
    },
    "regmemory": {
        "prefix": "regm",
        "body": [
            "reg\t[$1:0]\t$2[$3:0];"
        ],
        "description": "reg [N:0] reg_name [0:M];"
    },
    "wire": {
        "prefix": "wire",
        "body": [
            "wire\t$1;"
        ],
        "description": "wire wire_name;"
    },
    "wirearray": {
        "prefix": "wirea",
        "body": [
            "wire\t[$1:0]\t$2;"
        ],
        "description": "wire [N:0] wire_name;"
    },
    "wirememory": {
        "prefix": "wirem",
        "body": [
            "wire\t[$1:0]\t$2[$3:0];"
        ],
        "description": ";"
    },
    "include": {
        "prefix": "include",
        "body": [
            "`include \"$1\""
        ],
        "description": "`include \"..\""
    },
    "define": {
        "prefix": "define",
        "body": [
            "`def $1 = $2"
        ],
        "description": "`define var = val"
    },
    "parameter": {
        "prefix": "parameter",
        "body": [
            "parameter\t$1 = $2;"
        ],
        "description": "paramter var = val;"
    },
    "ternary": {
        "prefix": "ter",
        "body": [
            "$1 ? $2 : $3"
        ],
        "description": "a ? b : c"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if (${1:conditions}) begin",
            "\t$0",
            "end"
        ],
        "description": "if (...) begin ... end"
    },
    "ifelse": {
        "prefix": "ifelse",
        "body": [
            "if (${1:conditions}) begin",
            "\t$2",
            "end", 
            "else begin",
            "\t$3",
            "end"
        ],
        "description": "if (...) begin ... end else begin ... end"
    },
    "generate": {
        "prefix": "generate",
        "body": [
            "genvar $1;",
            "generate",
            "\tfor ($1 = 0; $1<$2; $1=$1+1) begin",
            "\t\t$0",
            "\tend",
            "endgenerate",
        ],
        "description": "for (...) begin ... end"
    },
    "for loop": {
        "prefix": "for",
        "body": [
            "for ($1 = $2; $3; $4) begin",
            "\t$0",
            "end"
        ],
        "description": "for (...) begin ... end"
    },
    "while loop": {
        "prefix": "while",
        "body": [
            "while ($1) begin",
            "\t$2",
            "end"
        ],
        "description": "while (...) begin ... end"
    },
    "function": {
        "prefix": "function",
        "body": [
            "function $1;",
            "\t$2;",
            "\t$3",
            "endfunction"
        ],
        "description": "function (...) ... endfunction"
    },
    "testbench template": {
        "prefix": "testbench",
        "body": [
            "`include \"$1.v\"",
            "`default_nettype none",
            "",
            "module tb_$1;",
            "reg clk;",
            "reg rst_n;",
            "",
            "$1 $3",
            "(",
            "\t.rst_n (rst_n),",
            "\t.clk (clk),",
            ");",
            "",
            "localparam CLK_PERIOD = 10;",
            "always #(CLK_PERIOD/2) clk=~clk;",
            "",
            "initial begin",
            "\t\\$dumpfile(\"tb_$1.vcd\");",
            "\t\\$dumpvars(0, tb_$1);",
            "end",
            "",
            "initial begin",
            "\t#1 rst_n<=1'bx;clk<=1'bx;",
            "\t#(CLK_PERIOD*3) rst_n<=1;",
            "\t#(CLK_PERIOD*3) rst_n<=0;clk<=0;",
            "\trepeat(5) @(posedge clk);",
            "\trst_n<=1;",
            "\t@(posedge clk);",
            "\trepeat(2) @(posedge clk);",
            "\t\\$finish(2);",
            "end",
            "",
            "endmodule",
            "`default_nettype wire"
        ],
        "description": "testbench template"
    }
    
}